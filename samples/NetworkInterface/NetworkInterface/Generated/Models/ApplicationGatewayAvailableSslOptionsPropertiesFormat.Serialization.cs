// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace NetworkInterface.Models
{
    public partial class ApplicationGatewayAvailableSslOptionsPropertiesFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (PredefinedPolicies != null)
            {
                writer.WritePropertyName("predefinedPolicies");
                writer.WriteStartArray();
                foreach (var item in PredefinedPolicies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (DefaultPolicy != null)
            {
                writer.WritePropertyName("defaultPolicy");
                writer.WriteStringValue(DefaultPolicy.Value.ToString());
            }
            if (AvailableCipherSuites != null)
            {
                writer.WritePropertyName("availableCipherSuites");
                writer.WriteStartArray();
                foreach (var item in AvailableCipherSuites)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (AvailableProtocols != null)
            {
                writer.WritePropertyName("availableProtocols");
                writer.WriteStartArray();
                foreach (var item in AvailableProtocols)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }
        internal static NetworkInterface.Models.ApplicationGatewayAvailableSslOptionsPropertiesFormat DeserializeApplicationGatewayAvailableSslOptionsPropertiesFormat(JsonElement element)
        {
            NetworkInterface.Models.ApplicationGatewayAvailableSslOptionsPropertiesFormat result = new NetworkInterface.Models.ApplicationGatewayAvailableSslOptionsPropertiesFormat();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("predefinedPolicies"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.PredefinedPolicies = new List<NetworkInterface.Models.SubResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.PredefinedPolicies.Add(NetworkInterface.Models.SubResource.DeserializeSubResource(item));
                    }
                    continue;
                }
                if (property.NameEquals("defaultPolicy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.DefaultPolicy = new NetworkInterface.Models.ApplicationGatewaySslPolicyName(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("availableCipherSuites"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.AvailableCipherSuites = new List<NetworkInterface.Models.ApplicationGatewaySslCipherSuite>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.AvailableCipherSuites.Add(new NetworkInterface.Models.ApplicationGatewaySslCipherSuite(item.GetString()));
                    }
                    continue;
                }
                if (property.NameEquals("availableProtocols"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.AvailableProtocols = new List<NetworkInterface.Models.ApplicationGatewaySslProtocol>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.AvailableProtocols.Add(new NetworkInterface.Models.ApplicationGatewaySslProtocol(item.GetString()));
                    }
                    continue;
                }
            }
            return result;
        }
    }
}
