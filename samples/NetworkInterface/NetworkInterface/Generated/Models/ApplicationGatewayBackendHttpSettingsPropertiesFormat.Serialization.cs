// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace NetworkInterface.Models
{
    public partial class ApplicationGatewayBackendHttpSettingsPropertiesFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Port != null)
            {
                writer.WritePropertyName("port");
                writer.WriteNumberValue(Port.Value);
            }
            if (Protocol != null)
            {
                writer.WritePropertyName("protocol");
                writer.WriteStringValue(Protocol.Value.ToString());
            }
            if (CookieBasedAffinity != null)
            {
                writer.WritePropertyName("cookieBasedAffinity");
                writer.WriteStringValue(CookieBasedAffinity.Value.ToString());
            }
            if (RequestTimeout != null)
            {
                writer.WritePropertyName("requestTimeout");
                writer.WriteNumberValue(RequestTimeout.Value);
            }
            if (Probe != null)
            {
                writer.WritePropertyName("probe");
                writer.WriteObjectValue(Probe);
            }
            if (AuthenticationCertificates != null)
            {
                writer.WritePropertyName("authenticationCertificates");
                writer.WriteStartArray();
                foreach (var item in AuthenticationCertificates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (TrustedRootCertificates != null)
            {
                writer.WritePropertyName("trustedRootCertificates");
                writer.WriteStartArray();
                foreach (var item in TrustedRootCertificates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (ConnectionDraining != null)
            {
                writer.WritePropertyName("connectionDraining");
                writer.WriteObjectValue(ConnectionDraining);
            }
            if (HostName != null)
            {
                writer.WritePropertyName("hostName");
                writer.WriteStringValue(HostName);
            }
            if (PickHostNameFromBackendAddress != null)
            {
                writer.WritePropertyName("pickHostNameFromBackendAddress");
                writer.WriteBooleanValue(PickHostNameFromBackendAddress.Value);
            }
            if (AffinityCookieName != null)
            {
                writer.WritePropertyName("affinityCookieName");
                writer.WriteStringValue(AffinityCookieName);
            }
            if (ProbeEnabled != null)
            {
                writer.WritePropertyName("probeEnabled");
                writer.WriteBooleanValue(ProbeEnabled.Value);
            }
            if (Path != null)
            {
                writer.WritePropertyName("path");
                writer.WriteStringValue(Path);
            }
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            writer.WriteEndObject();
        }
        internal static NetworkInterface.Models.ApplicationGatewayBackendHttpSettingsPropertiesFormat DeserializeApplicationGatewayBackendHttpSettingsPropertiesFormat(JsonElement element)
        {
            NetworkInterface.Models.ApplicationGatewayBackendHttpSettingsPropertiesFormat result = new NetworkInterface.Models.ApplicationGatewayBackendHttpSettingsPropertiesFormat();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("port"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Port = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("protocol"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Protocol = new NetworkInterface.Models.ApplicationGatewayProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("cookieBasedAffinity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.CookieBasedAffinity = new NetworkInterface.Models.ApplicationGatewayCookieBasedAffinity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("requestTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.RequestTimeout = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("probe"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Probe = NetworkInterface.Models.SubResource.DeserializeSubResource(property.Value);
                    continue;
                }
                if (property.NameEquals("authenticationCertificates"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.AuthenticationCertificates = new List<NetworkInterface.Models.SubResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.AuthenticationCertificates.Add(NetworkInterface.Models.SubResource.DeserializeSubResource(item));
                    }
                    continue;
                }
                if (property.NameEquals("trustedRootCertificates"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.TrustedRootCertificates = new List<NetworkInterface.Models.SubResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.TrustedRootCertificates.Add(NetworkInterface.Models.SubResource.DeserializeSubResource(item));
                    }
                    continue;
                }
                if (property.NameEquals("connectionDraining"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ConnectionDraining = NetworkInterface.Models.ApplicationGatewayConnectionDraining.DeserializeApplicationGatewayConnectionDraining(property.Value);
                    continue;
                }
                if (property.NameEquals("hostName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.HostName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pickHostNameFromBackendAddress"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.PickHostNameFromBackendAddress = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("affinityCookieName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.AffinityCookieName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("probeEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ProbeEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("path"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Path = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ProvisioningState = new NetworkInterface.Models.ProvisioningState(property.Value.GetString());
                    continue;
                }
            }
            return result;
        }
    }
}
