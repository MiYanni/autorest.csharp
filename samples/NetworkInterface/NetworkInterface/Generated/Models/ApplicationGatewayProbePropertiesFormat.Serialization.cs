// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace NetworkInterface.Models
{
    public partial class ApplicationGatewayProbePropertiesFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Protocol != null)
            {
                writer.WritePropertyName("protocol");
                writer.WriteStringValue(Protocol.Value.ToString());
            }
            if (Host != null)
            {
                writer.WritePropertyName("host");
                writer.WriteStringValue(Host);
            }
            if (Path != null)
            {
                writer.WritePropertyName("path");
                writer.WriteStringValue(Path);
            }
            if (Interval != null)
            {
                writer.WritePropertyName("interval");
                writer.WriteNumberValue(Interval.Value);
            }
            if (Timeout != null)
            {
                writer.WritePropertyName("timeout");
                writer.WriteNumberValue(Timeout.Value);
            }
            if (UnhealthyThreshold != null)
            {
                writer.WritePropertyName("unhealthyThreshold");
                writer.WriteNumberValue(UnhealthyThreshold.Value);
            }
            if (PickHostNameFromBackendHttpSettings != null)
            {
                writer.WritePropertyName("pickHostNameFromBackendHttpSettings");
                writer.WriteBooleanValue(PickHostNameFromBackendHttpSettings.Value);
            }
            if (MinServers != null)
            {
                writer.WritePropertyName("minServers");
                writer.WriteNumberValue(MinServers.Value);
            }
            if (Match != null)
            {
                writer.WritePropertyName("match");
                writer.WriteObjectValue(Match);
            }
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Port != null)
            {
                writer.WritePropertyName("port");
                writer.WriteNumberValue(Port.Value);
            }
            writer.WriteEndObject();
        }
        internal static NetworkInterface.Models.ApplicationGatewayProbePropertiesFormat DeserializeApplicationGatewayProbePropertiesFormat(JsonElement element)
        {
            NetworkInterface.Models.ApplicationGatewayProbePropertiesFormat result = new NetworkInterface.Models.ApplicationGatewayProbePropertiesFormat();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("protocol"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Protocol = new NetworkInterface.Models.ApplicationGatewayProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("host"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Host = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("path"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Path = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("interval"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Interval = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("timeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Timeout = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("unhealthyThreshold"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.UnhealthyThreshold = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("pickHostNameFromBackendHttpSettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.PickHostNameFromBackendHttpSettings = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("minServers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.MinServers = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("match"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Match = NetworkInterface.Models.ApplicationGatewayProbeHealthResponseMatch.DeserializeApplicationGatewayProbeHealthResponseMatch(property.Value);
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ProvisioningState = new NetworkInterface.Models.ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("port"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Port = property.Value.GetInt32();
                    continue;
                }
            }
            return result;
        }
    }
}
