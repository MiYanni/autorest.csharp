// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace NetworkInterface.Models
{
    public partial class ApplicationGatewaySslPredefinedPolicyPropertiesFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (CipherSuites != null)
            {
                writer.WritePropertyName("cipherSuites");
                writer.WriteStartArray();
                foreach (var item in CipherSuites)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (MinProtocolVersion != null)
            {
                writer.WritePropertyName("minProtocolVersion");
                writer.WriteStringValue(MinProtocolVersion.Value.ToString());
            }
            writer.WriteEndObject();
        }
        internal static NetworkInterface.Models.ApplicationGatewaySslPredefinedPolicyPropertiesFormat DeserializeApplicationGatewaySslPredefinedPolicyPropertiesFormat(JsonElement element)
        {
            NetworkInterface.Models.ApplicationGatewaySslPredefinedPolicyPropertiesFormat result = new NetworkInterface.Models.ApplicationGatewaySslPredefinedPolicyPropertiesFormat();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("cipherSuites"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.CipherSuites = new List<NetworkInterface.Models.ApplicationGatewaySslCipherSuite>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.CipherSuites.Add(new NetworkInterface.Models.ApplicationGatewaySslCipherSuite(item.GetString()));
                    }
                    continue;
                }
                if (property.NameEquals("minProtocolVersion"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.MinProtocolVersion = new NetworkInterface.Models.ApplicationGatewaySslProtocol(property.Value.GetString());
                    continue;
                }
            }
            return result;
        }
    }
}
