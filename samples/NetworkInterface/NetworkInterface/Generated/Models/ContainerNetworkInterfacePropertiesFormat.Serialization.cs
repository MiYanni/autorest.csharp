// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace NetworkInterface.Models
{
    public partial class ContainerNetworkInterfacePropertiesFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (ContainerNetworkInterfaceConfiguration != null)
            {
                writer.WritePropertyName("containerNetworkInterfaceConfiguration");
                writer.WriteObjectValue(ContainerNetworkInterfaceConfiguration);
            }
            if (Container != null)
            {
                writer.WritePropertyName("container");
                writer.WriteObjectValue(Container);
            }
            if (IpConfigurations != null)
            {
                writer.WritePropertyName("ipConfigurations");
                writer.WriteStartArray();
                foreach (var item in IpConfigurations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            writer.WriteEndObject();
        }
        internal static NetworkInterface.Models.ContainerNetworkInterfacePropertiesFormat DeserializeContainerNetworkInterfacePropertiesFormat(JsonElement element)
        {
            NetworkInterface.Models.ContainerNetworkInterfacePropertiesFormat result = new NetworkInterface.Models.ContainerNetworkInterfacePropertiesFormat();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("containerNetworkInterfaceConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ContainerNetworkInterfaceConfiguration = NetworkInterface.Models.ContainerNetworkInterfaceConfiguration.DeserializeContainerNetworkInterfaceConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("container"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Container = NetworkInterface.Models.Container.DeserializeContainer(property.Value);
                    continue;
                }
                if (property.NameEquals("ipConfigurations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.IpConfigurations = new List<NetworkInterface.Models.ContainerNetworkInterfaceIpConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.IpConfigurations.Add(NetworkInterface.Models.ContainerNetworkInterfaceIpConfiguration.DeserializeContainerNetworkInterfaceIpConfiguration(item));
                    }
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ProvisioningState = new NetworkInterface.Models.ProvisioningState(property.Value.GetString());
                    continue;
                }
            }
            return result;
        }
    }
}
