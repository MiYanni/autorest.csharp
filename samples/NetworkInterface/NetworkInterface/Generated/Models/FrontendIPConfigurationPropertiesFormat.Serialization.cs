// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace NetworkInterface.Models
{
    public partial class FrontendIPConfigurationPropertiesFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (InboundNatRules != null)
            {
                writer.WritePropertyName("inboundNatRules");
                writer.WriteStartArray();
                foreach (var item in InboundNatRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (InboundNatPools != null)
            {
                writer.WritePropertyName("inboundNatPools");
                writer.WriteStartArray();
                foreach (var item in InboundNatPools)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (OutboundRules != null)
            {
                writer.WritePropertyName("outboundRules");
                writer.WriteStartArray();
                foreach (var item in OutboundRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (LoadBalancingRules != null)
            {
                writer.WritePropertyName("loadBalancingRules");
                writer.WriteStartArray();
                foreach (var item in LoadBalancingRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (PrivateIPAddress != null)
            {
                writer.WritePropertyName("privateIPAddress");
                writer.WriteStringValue(PrivateIPAddress);
            }
            if (PrivateIPAllocationMethod != null)
            {
                writer.WritePropertyName("privateIPAllocationMethod");
                writer.WriteStringValue(PrivateIPAllocationMethod.Value.ToString());
            }
            if (PrivateIPAddressVersion != null)
            {
                writer.WritePropertyName("privateIPAddressVersion");
                writer.WriteStringValue(PrivateIPAddressVersion.Value.ToString());
            }
            if (Subnet != null)
            {
                writer.WritePropertyName("subnet");
                writer.WriteObjectValue(Subnet);
            }
            if (PublicIPAddress != null)
            {
                writer.WritePropertyName("publicIPAddress");
                writer.WriteObjectValue(PublicIPAddress);
            }
            if (PublicIPPrefix != null)
            {
                writer.WritePropertyName("publicIPPrefix");
                writer.WriteObjectValue(PublicIPPrefix);
            }
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            writer.WriteEndObject();
        }
        internal static NetworkInterface.Models.FrontendIPConfigurationPropertiesFormat DeserializeFrontendIPConfigurationPropertiesFormat(JsonElement element)
        {
            NetworkInterface.Models.FrontendIPConfigurationPropertiesFormat result = new NetworkInterface.Models.FrontendIPConfigurationPropertiesFormat();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("inboundNatRules"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.InboundNatRules = new List<NetworkInterface.Models.SubResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.InboundNatRules.Add(NetworkInterface.Models.SubResource.DeserializeSubResource(item));
                    }
                    continue;
                }
                if (property.NameEquals("inboundNatPools"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.InboundNatPools = new List<NetworkInterface.Models.SubResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.InboundNatPools.Add(NetworkInterface.Models.SubResource.DeserializeSubResource(item));
                    }
                    continue;
                }
                if (property.NameEquals("outboundRules"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.OutboundRules = new List<NetworkInterface.Models.SubResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.OutboundRules.Add(NetworkInterface.Models.SubResource.DeserializeSubResource(item));
                    }
                    continue;
                }
                if (property.NameEquals("loadBalancingRules"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.LoadBalancingRules = new List<NetworkInterface.Models.SubResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.LoadBalancingRules.Add(NetworkInterface.Models.SubResource.DeserializeSubResource(item));
                    }
                    continue;
                }
                if (property.NameEquals("privateIPAddress"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.PrivateIPAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateIPAllocationMethod"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.PrivateIPAllocationMethod = new NetworkInterface.Models.IPAllocationMethod(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("privateIPAddressVersion"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.PrivateIPAddressVersion = new NetworkInterface.Models.IPVersion(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("subnet"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Subnet = NetworkInterface.Models.Subnet.DeserializeSubnet(property.Value);
                    continue;
                }
                if (property.NameEquals("publicIPAddress"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.PublicIPAddress = NetworkInterface.Models.PublicIPAddress.DeserializePublicIPAddress(property.Value);
                    continue;
                }
                if (property.NameEquals("publicIPPrefix"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.PublicIPPrefix = NetworkInterface.Models.SubResource.DeserializeSubResource(property.Value);
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ProvisioningState = new NetworkInterface.Models.ProvisioningState(property.Value.GetString());
                    continue;
                }
            }
            return result;
        }
    }
}
