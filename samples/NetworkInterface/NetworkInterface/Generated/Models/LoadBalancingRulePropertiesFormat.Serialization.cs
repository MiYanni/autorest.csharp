// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace NetworkInterface.Models
{
    public partial class LoadBalancingRulePropertiesFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (FrontendIPConfiguration != null)
            {
                writer.WritePropertyName("frontendIPConfiguration");
                writer.WriteObjectValue(FrontendIPConfiguration);
            }
            if (BackendAddressPool != null)
            {
                writer.WritePropertyName("backendAddressPool");
                writer.WriteObjectValue(BackendAddressPool);
            }
            if (Probe != null)
            {
                writer.WritePropertyName("probe");
                writer.WriteObjectValue(Probe);
            }
            writer.WritePropertyName("protocol");
            writer.WriteStringValue(Protocol.ToString());
            if (LoadDistribution != null)
            {
                writer.WritePropertyName("loadDistribution");
                writer.WriteStringValue(LoadDistribution.Value.ToString());
            }
            writer.WritePropertyName("frontendPort");
            writer.WriteNumberValue(FrontendPort);
            if (BackendPort != null)
            {
                writer.WritePropertyName("backendPort");
                writer.WriteNumberValue(BackendPort.Value);
            }
            if (IdleTimeoutInMinutes != null)
            {
                writer.WritePropertyName("idleTimeoutInMinutes");
                writer.WriteNumberValue(IdleTimeoutInMinutes.Value);
            }
            if (EnableFloatingIP != null)
            {
                writer.WritePropertyName("enableFloatingIP");
                writer.WriteBooleanValue(EnableFloatingIP.Value);
            }
            if (EnableTcpReset != null)
            {
                writer.WritePropertyName("enableTcpReset");
                writer.WriteBooleanValue(EnableTcpReset.Value);
            }
            if (DisableOutboundSnat != null)
            {
                writer.WritePropertyName("disableOutboundSnat");
                writer.WriteBooleanValue(DisableOutboundSnat.Value);
            }
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            writer.WriteEndObject();
        }
        internal static NetworkInterface.Models.LoadBalancingRulePropertiesFormat DeserializeLoadBalancingRulePropertiesFormat(JsonElement element)
        {
            NetworkInterface.Models.LoadBalancingRulePropertiesFormat result = new NetworkInterface.Models.LoadBalancingRulePropertiesFormat();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("frontendIPConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.FrontendIPConfiguration = NetworkInterface.Models.SubResource.DeserializeSubResource(property.Value);
                    continue;
                }
                if (property.NameEquals("backendAddressPool"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.BackendAddressPool = NetworkInterface.Models.SubResource.DeserializeSubResource(property.Value);
                    continue;
                }
                if (property.NameEquals("probe"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Probe = NetworkInterface.Models.SubResource.DeserializeSubResource(property.Value);
                    continue;
                }
                if (property.NameEquals("protocol"))
                {
                    result.Protocol = new NetworkInterface.Models.TransportProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("loadDistribution"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.LoadDistribution = new NetworkInterface.Models.LoadDistribution(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("frontendPort"))
                {
                    result.FrontendPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("backendPort"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.BackendPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("idleTimeoutInMinutes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.IdleTimeoutInMinutes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("enableFloatingIP"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.EnableFloatingIP = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableTcpReset"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.EnableTcpReset = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("disableOutboundSnat"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.DisableOutboundSnat = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ProvisioningState = new NetworkInterface.Models.ProvisioningState(property.Value.GetString());
                    continue;
                }
            }
            return result;
        }
    }
}
