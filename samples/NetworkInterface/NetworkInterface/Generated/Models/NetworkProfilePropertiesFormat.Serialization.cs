// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace NetworkInterface.Models
{
    public partial class NetworkProfilePropertiesFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (ContainerNetworkInterfaces != null)
            {
                writer.WritePropertyName("containerNetworkInterfaces");
                writer.WriteStartArray();
                foreach (var item in ContainerNetworkInterfaces)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (ContainerNetworkInterfaceConfigurations != null)
            {
                writer.WritePropertyName("containerNetworkInterfaceConfigurations");
                writer.WriteStartArray();
                foreach (var item in ContainerNetworkInterfaceConfigurations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (ResourceGuid != null)
            {
                writer.WritePropertyName("resourceGuid");
                writer.WriteStringValue(ResourceGuid);
            }
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            writer.WriteEndObject();
        }
        internal static NetworkInterface.Models.NetworkProfilePropertiesFormat DeserializeNetworkProfilePropertiesFormat(JsonElement element)
        {
            NetworkInterface.Models.NetworkProfilePropertiesFormat result = new NetworkInterface.Models.NetworkProfilePropertiesFormat();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("containerNetworkInterfaces"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ContainerNetworkInterfaces = new List<NetworkInterface.Models.ContainerNetworkInterface>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.ContainerNetworkInterfaces.Add(NetworkInterface.Models.ContainerNetworkInterface.DeserializeContainerNetworkInterface(item));
                    }
                    continue;
                }
                if (property.NameEquals("containerNetworkInterfaceConfigurations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ContainerNetworkInterfaceConfigurations = new List<NetworkInterface.Models.ContainerNetworkInterfaceConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.ContainerNetworkInterfaceConfigurations.Add(NetworkInterface.Models.ContainerNetworkInterfaceConfiguration.DeserializeContainerNetworkInterfaceConfiguration(item));
                    }
                    continue;
                }
                if (property.NameEquals("resourceGuid"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ResourceGuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ProvisioningState = new NetworkInterface.Models.ProvisioningState(property.Value.GetString());
                    continue;
                }
            }
            return result;
        }
    }
}
