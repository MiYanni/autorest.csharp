// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace NetworkInterface.Models
{
    public partial class PrivateLinkServiceConnectionProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (PrivateLinkServiceId != null)
            {
                writer.WritePropertyName("privateLinkServiceId");
                writer.WriteStringValue(PrivateLinkServiceId);
            }
            if (GroupIds != null)
            {
                writer.WritePropertyName("groupIds");
                writer.WriteStartArray();
                foreach (var item in GroupIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (RequestMessage != null)
            {
                writer.WritePropertyName("requestMessage");
                writer.WriteStringValue(RequestMessage);
            }
            if (PrivateLinkServiceConnectionState != null)
            {
                writer.WritePropertyName("privateLinkServiceConnectionState");
                writer.WriteObjectValue(PrivateLinkServiceConnectionState);
            }
            writer.WriteEndObject();
        }
        internal static NetworkInterface.Models.PrivateLinkServiceConnectionProperties DeserializePrivateLinkServiceConnectionProperties(JsonElement element)
        {
            NetworkInterface.Models.PrivateLinkServiceConnectionProperties result = new NetworkInterface.Models.PrivateLinkServiceConnectionProperties();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ProvisioningState = new NetworkInterface.Models.ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("privateLinkServiceId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.PrivateLinkServiceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupIds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.GroupIds = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.GroupIds.Add(item.GetString());
                    }
                    continue;
                }
                if (property.NameEquals("requestMessage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.RequestMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateLinkServiceConnectionState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.PrivateLinkServiceConnectionState = NetworkInterface.Models.PrivateLinkServiceConnectionState.DeserializePrivateLinkServiceConnectionState(property.Value);
                    continue;
                }
            }
            return result;
        }
    }
}
