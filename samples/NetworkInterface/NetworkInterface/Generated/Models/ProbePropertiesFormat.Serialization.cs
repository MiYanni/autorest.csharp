// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace NetworkInterface.Models
{
    public partial class ProbePropertiesFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (LoadBalancingRules != null)
            {
                writer.WritePropertyName("loadBalancingRules");
                writer.WriteStartArray();
                foreach (var item in LoadBalancingRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("protocol");
            writer.WriteStringValue(Protocol.ToString());
            writer.WritePropertyName("port");
            writer.WriteNumberValue(Port);
            if (IntervalInSeconds != null)
            {
                writer.WritePropertyName("intervalInSeconds");
                writer.WriteNumberValue(IntervalInSeconds.Value);
            }
            if (NumberOfProbes != null)
            {
                writer.WritePropertyName("numberOfProbes");
                writer.WriteNumberValue(NumberOfProbes.Value);
            }
            if (RequestPath != null)
            {
                writer.WritePropertyName("requestPath");
                writer.WriteStringValue(RequestPath);
            }
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            writer.WriteEndObject();
        }
        internal static NetworkInterface.Models.ProbePropertiesFormat DeserializeProbePropertiesFormat(JsonElement element)
        {
            NetworkInterface.Models.ProbePropertiesFormat result = new NetworkInterface.Models.ProbePropertiesFormat();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("loadBalancingRules"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.LoadBalancingRules = new List<NetworkInterface.Models.SubResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.LoadBalancingRules.Add(NetworkInterface.Models.SubResource.DeserializeSubResource(item));
                    }
                    continue;
                }
                if (property.NameEquals("protocol"))
                {
                    result.Protocol = new NetworkInterface.Models.ProbeProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("port"))
                {
                    result.Port = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("intervalInSeconds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.IntervalInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numberOfProbes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.NumberOfProbes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("requestPath"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.RequestPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ProvisioningState = new NetworkInterface.Models.ProvisioningState(property.Value.GetString());
                    continue;
                }
            }
            return result;
        }
    }
}
