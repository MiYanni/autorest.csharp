// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace NetworkInterface.Models
{
    /// <summary> The current provisioning state. </summary>
    public readonly partial struct ProvisioningState : IEquatable<NetworkInterface.Models.ProvisioningState>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ProvisioningState"/> values are the same. </summary>
        public ProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string UpdatingValue = "Updating";
        private const string DeletingValue = "Deleting";
        private const string FailedValue = "Failed";

        /// <summary> Succeeded. </summary>
        public static NetworkInterface.Models.ProvisioningState Succeeded { get; } = new NetworkInterface.Models.ProvisioningState(SucceededValue);
        /// <summary> Updating. </summary>
        public static NetworkInterface.Models.ProvisioningState Updating { get; } = new NetworkInterface.Models.ProvisioningState(UpdatingValue);
        /// <summary> Deleting. </summary>
        public static NetworkInterface.Models.ProvisioningState Deleting { get; } = new NetworkInterface.Models.ProvisioningState(DeletingValue);
        /// <summary> Failed. </summary>
        public static NetworkInterface.Models.ProvisioningState Failed { get; } = new NetworkInterface.Models.ProvisioningState(FailedValue);
        /// <summary> Determines if two <see cref="ProvisioningState"/> values are the same. </summary>
        public static bool operator ==(NetworkInterface.Models.ProvisioningState left, NetworkInterface.Models.ProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(NetworkInterface.Models.ProvisioningState left, NetworkInterface.Models.ProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProvisioningState"/>. </summary>
        public static implicit operator NetworkInterface.Models.ProvisioningState(string value) => new NetworkInterface.Models.ProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NetworkInterface.Models.ProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NetworkInterface.Models.ProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
