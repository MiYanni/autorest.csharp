// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace NetworkInterface.Models
{
    /// <summary> The type of Azure hop the packet should be sent to. </summary>
    public readonly partial struct RouteNextHopType : IEquatable<NetworkInterface.Models.RouteNextHopType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="RouteNextHopType"/> values are the same. </summary>
        public RouteNextHopType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string VirtualNetworkGatewayValue = "VirtualNetworkGateway";
        private const string VnetLocalValue = "VnetLocal";
        private const string InternetValue = "Internet";
        private const string VirtualApplianceValue = "VirtualAppliance";
        private const string NoneValue = "None";

        /// <summary> VirtualNetworkGateway. </summary>
        public static NetworkInterface.Models.RouteNextHopType VirtualNetworkGateway { get; } = new NetworkInterface.Models.RouteNextHopType(VirtualNetworkGatewayValue);
        /// <summary> VnetLocal. </summary>
        public static NetworkInterface.Models.RouteNextHopType VnetLocal { get; } = new NetworkInterface.Models.RouteNextHopType(VnetLocalValue);
        /// <summary> Internet. </summary>
        public static NetworkInterface.Models.RouteNextHopType Internet { get; } = new NetworkInterface.Models.RouteNextHopType(InternetValue);
        /// <summary> VirtualAppliance. </summary>
        public static NetworkInterface.Models.RouteNextHopType VirtualAppliance { get; } = new NetworkInterface.Models.RouteNextHopType(VirtualApplianceValue);
        /// <summary> None. </summary>
        public static NetworkInterface.Models.RouteNextHopType None { get; } = new NetworkInterface.Models.RouteNextHopType(NoneValue);
        /// <summary> Determines if two <see cref="RouteNextHopType"/> values are the same. </summary>
        public static bool operator ==(NetworkInterface.Models.RouteNextHopType left, NetworkInterface.Models.RouteNextHopType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RouteNextHopType"/> values are not the same. </summary>
        public static bool operator !=(NetworkInterface.Models.RouteNextHopType left, NetworkInterface.Models.RouteNextHopType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RouteNextHopType"/>. </summary>
        public static implicit operator NetworkInterface.Models.RouteNextHopType(string value) => new NetworkInterface.Models.RouteNextHopType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NetworkInterface.Models.RouteNextHopType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NetworkInterface.Models.RouteNextHopType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
