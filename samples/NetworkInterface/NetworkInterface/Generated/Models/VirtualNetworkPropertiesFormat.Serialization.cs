// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace NetworkInterface.Models
{
    public partial class VirtualNetworkPropertiesFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (AddressSpace != null)
            {
                writer.WritePropertyName("addressSpace");
                writer.WriteObjectValue(AddressSpace);
            }
            if (DhcpOptions != null)
            {
                writer.WritePropertyName("dhcpOptions");
                writer.WriteObjectValue(DhcpOptions);
            }
            if (Subnets != null)
            {
                writer.WritePropertyName("subnets");
                writer.WriteStartArray();
                foreach (var item in Subnets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (VirtualNetworkPeerings != null)
            {
                writer.WritePropertyName("virtualNetworkPeerings");
                writer.WriteStartArray();
                foreach (var item in VirtualNetworkPeerings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (ResourceGuid != null)
            {
                writer.WritePropertyName("resourceGuid");
                writer.WriteStringValue(ResourceGuid);
            }
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (EnableDdosProtection != null)
            {
                writer.WritePropertyName("enableDdosProtection");
                writer.WriteBooleanValue(EnableDdosProtection.Value);
            }
            if (EnableVmProtection != null)
            {
                writer.WritePropertyName("enableVmProtection");
                writer.WriteBooleanValue(EnableVmProtection.Value);
            }
            if (DdosProtectionPlan != null)
            {
                writer.WritePropertyName("ddosProtectionPlan");
                writer.WriteObjectValue(DdosProtectionPlan);
            }
            if (BgpCommunities != null)
            {
                writer.WritePropertyName("bgpCommunities");
                writer.WriteObjectValue(BgpCommunities);
            }
            writer.WriteEndObject();
        }
        internal static NetworkInterface.Models.VirtualNetworkPropertiesFormat DeserializeVirtualNetworkPropertiesFormat(JsonElement element)
        {
            NetworkInterface.Models.VirtualNetworkPropertiesFormat result = new NetworkInterface.Models.VirtualNetworkPropertiesFormat();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("addressSpace"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.AddressSpace = NetworkInterface.Models.AddressSpace.DeserializeAddressSpace(property.Value);
                    continue;
                }
                if (property.NameEquals("dhcpOptions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.DhcpOptions = NetworkInterface.Models.DhcpOptions.DeserializeDhcpOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("subnets"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Subnets = new List<NetworkInterface.Models.Subnet>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.Subnets.Add(NetworkInterface.Models.Subnet.DeserializeSubnet(item));
                    }
                    continue;
                }
                if (property.NameEquals("virtualNetworkPeerings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.VirtualNetworkPeerings = new List<NetworkInterface.Models.VirtualNetworkPeering>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.VirtualNetworkPeerings.Add(NetworkInterface.Models.VirtualNetworkPeering.DeserializeVirtualNetworkPeering(item));
                    }
                    continue;
                }
                if (property.NameEquals("resourceGuid"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ResourceGuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ProvisioningState = new NetworkInterface.Models.ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enableDdosProtection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.EnableDdosProtection = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableVmProtection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.EnableVmProtection = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("ddosProtectionPlan"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.DdosProtectionPlan = NetworkInterface.Models.SubResource.DeserializeSubResource(property.Value);
                    continue;
                }
                if (property.NameEquals("bgpCommunities"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.BgpCommunities = NetworkInterface.Models.VirtualNetworkBgpCommunities.DeserializeVirtualNetworkBgpCommunities(property.Value);
                    continue;
                }
            }
            return result;
        }
    }
}
