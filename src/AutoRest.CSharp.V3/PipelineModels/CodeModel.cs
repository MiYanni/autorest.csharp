//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.0.23.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace AutoRest.CSharp.V3.PipelineModels
{
    #pragma warning disable // Disable all warnings

    /// <summary>- since API version formats range from
    /// Azure ARM API date style (2018-01-01) to semver (1.2.3)
    /// and virtually any other text, this value tends to be an
    /// opaque string with the possibility of a modifier to indicate
    /// that it is a range.
    ///
    /// options:
    /// - prepend a dash or append a plus to indicate a range
    /// (ie, '2018-01-01+' or '-2019-01-01', or '1.0+' )
    ///
    /// - semver-range style (ie, '^1.0.0' or '~1.0.0' )</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ApiVersion
    {
        /// <summary>the actual api version string used in the API</summary>
        [System.Text.Json.Serialization.JsonPropertyName("version")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("range")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiVersionRange Range { get; set; }
    }

    /// <summary>a collection of api versions</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ApiVersions : System.Collections.ObjectModel.Collection<ApiVersion>
    {
    }

    /// <summary>represents  deprecation information for a given aspect</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Deprecation
    {
        /// <summary>the reason why this aspect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>the api versions that this deprecation is applicable to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("apiVersions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; } = new System.Collections.ObjectModel.Collection<ApiVersion>();
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Extensions
    {
        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions1 { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Schema
    {
        /// <summary>per-language information for Schema</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>the schema type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AllSchemaTypes Type { get; set; }

        /// <summary>a short description</summary>
        [System.Text.Json.Serialization.JsonPropertyName("summary")]
        public string Summary { get; set; }

        /// <summary>example information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("example")]
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultValue")]
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serialization")]
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.Text.Json.Serialization.JsonPropertyName("uid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("$key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("apiVersions")]
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deprecated")]
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalDocs")]
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("protocol")]
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    /// <summary>a reference to external documentation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ExternalDocumentation
    {
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>an URI</summary>
        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement> _additionalProperties = new System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement>();

        [System.Text.Json.Serialization.JsonExtensionDataAttribute]
        public System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>custom extensible metadata for individual language generators</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Languages
    {
        [System.Text.Json.Serialization.JsonPropertyName("default")]
        [System.ComponentModel.DataAnnotations.Required]
        public Language Default { get; set; } = new Language();

        [System.Text.Json.Serialization.JsonPropertyName("csharp")]
        public CSharpLanguage Csharp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("python")]
        public Language Python { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ruby")]
        public Language Ruby { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("go")]
        public Language Go { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typescript")]
        public Language Typescript { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("javascript")]
        public Language Javascript { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("powershell")]
        public Language Powershell { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("java")]
        public Language Java { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("c")]
        public Language C { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cpp")]
        public Language Cpp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("swift")]
        public Language Swift { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("objectivec")]
        public Language Objectivec { get; set; }

        private System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement> _additionalProperties = new System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement>();

        [System.Text.Json.Serialization.JsonExtensionDataAttribute]
        public System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>custom extensible metadata for individual protocols (ie, HTTP, etc)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Protocols
    {
        [System.Text.Json.Serialization.JsonPropertyName("http")]
        public Protocol Http { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amqp")]
        public Protocol Amqp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mqtt")]
        public Protocol Mqtt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("jsonrpc")]
        public Protocol Jsonrpc { get; set; }

        private System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement> _additionalProperties = new System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement>();

        [System.Text.Json.Serialization.JsonExtensionDataAttribute]
        public System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>common pattern for Metadata on aspects</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Metadata
    {
        /// <summary>per-language information for this aspect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("protocol")]
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Language
    {
        /// <summary>name used in actual implementation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>description text - describes this node.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement> _additionalProperties = new System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement>();

        [System.Text.Json.Serialization.JsonExtensionDataAttribute]
        public System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Protocol
    {
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class XmlSerlializationFormat : SerializationFormat
    {
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("namespace")]
        public string Namespace { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("prefix")]
        public string Prefix { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attribute")]
        public bool Attribute { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("wrapped")]
        public bool Wrapped { get; set; }
    }

    /// <summary>custom extensible metadata for individual serialization formats</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class SerializationFormats
    {
        [System.Text.Json.Serialization.JsonPropertyName("json")]
        public SerializationFormat Json { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("xml")]
        public XmlSerlializationFormat Xml { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("protobuf")]
        public SerializationFormat Protobuf { get; set; }

        private System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement> _additionalProperties = new System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement>();

        [System.Text.Json.Serialization.JsonExtensionDataAttribute]
        public System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>possible schema types that indicate the type of schema.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum SchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"and")]
        And = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"array")]
        Array = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"boolean")]
        Boolean = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"byte-array")]
        ByteArray = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"char")]
        Char = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"choice")]
        Choice = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"constant")]
        Constant = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"credential")]
        Credential = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"date-time")]
        DateTime = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"dictionary")]
        Dictionary = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"duration")]
        Duration = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"flag")]
        Flag = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"integer")]
        Integer = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"not")]
        Not = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"object")]
        Object = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"odata-query")]
        OdataQuery = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"or")]
        Or = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"parameter-group")]
        ParameterGroup = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"sealed-choice")]
        SealedChoice = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"stream")]
        Stream = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"string")]
        String = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"unixtime")]
        Unixtime = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"uuid")]
        Uuid = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"xor")]
        Xor = 27,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum CompoundSchemaTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"and")]
        And = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"or")]
        Or = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"xor")]
        Xor = 2,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum PrimitiveSchemaTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"boolean")]
        Boolean = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"char")]
        Char = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"credential")]
        Credential = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"date-time")]
        DateTime = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"duration")]
        Duration = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"integer")]
        Integer = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"string")]
        String = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"unixtime")]
        Unixtime = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"uuid")]
        Uuid = 11,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum ValueSchemaTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"array")]
        Array = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"boolean")]
        Boolean = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"byte-array")]
        ByteArray = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"char")]
        Char = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"choice")]
        Choice = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"credential")]
        Credential = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"date-time")]
        DateTime = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"duration")]
        Duration = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"flag")]
        Flag = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"integer")]
        Integer = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"sealed-choice")]
        SealedChoice = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"string")]
        String = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"unixtime")]
        Unixtime = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"uuid")]
        Uuid = 16,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum ObjectSchemaTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"and")]
        And = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dictionary")]
        Dictionary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"object")]
        Object = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"or")]
        Or = 3,
    }

    /// <summary>all schema types</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum AllSchemaTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"and")]
        And = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"array")]
        Array = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"boolean")]
        Boolean = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"byte-array")]
        ByteArray = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"char")]
        Char = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"choice")]
        Choice = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"constant")]
        Constant = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"credential")]
        Credential = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"date-time")]
        DateTime = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"dictionary")]
        Dictionary = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"duration")]
        Duration = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"flag")]
        Flag = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"integer")]
        Integer = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"not")]
        Not = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"object")]
        Object = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"odata-query")]
        OdataQuery = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"or")]
        Or = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"parameter-group")]
        ParameterGroup = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"sealed-choice")]
        SealedChoice = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"string")]
        String = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"unixtime")]
        Unixtime = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"uuid")]
        Uuid = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"xor")]
        Xor = 25,
    }

    /// <summary>Disciminator for polymorphic class hierarchy</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Discriminator
    {
        [System.Text.Json.Serialization.JsonPropertyName("propertyName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PropertyName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mapping")]
        public DictionaryOfString Mapping { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    /// <summary>common base interface for properties, parameters and the like.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Value
    {
        /// <summary>the schema of this Value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("schema")]
        [System.ComponentModel.DataAnnotations.Required]
        public Schema Schema { get; set; } = new Schema();

        /// <summary>if the value is marked 'required'.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("required")]
        public bool Required { get; set; }

        /// <summary>can null be passed in instead</summary>
        [System.Text.Json.Serialization.JsonPropertyName("nullable")]
        public bool Nullable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("$key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("uid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>a short description</summary>
        [System.Text.Json.Serialization.JsonPropertyName("summary")]
        public string Summary { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("apiVersions")]
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deprecated")]
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalDocs")]
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-language information for this aspect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("protocol")]
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    /// <summary>a property is a child value in an object</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Property : Value
    {
        /// <summary>if the property is marked read-only (ie, not intended to be sent to the service)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("readOnly")]
        public bool ReadOnly { get; set; }

        /// <summary>the wire name of this property</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serializedName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SerializedName { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum ImplementationLocation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Client")]
        Client = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Method")]
        Method = 1,
    }

    /// <summary>a definition of an discrete input for an operation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Parameter : Value
    {
        /// <summary>suggested implementation location for this parameter</summary>
        [System.Text.Json.Serialization.JsonPropertyName("implementation")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ImplementationLocation Implementation { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class SerializationFormat
    {
        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    /// <summary>schema types that are non-object or complex types</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ValueSchema : Schema
    {
    }

    /// <summary>Schema types that are primitive language values</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class PrimitiveSchema : ValueSchema
    {
    }

    /// <summary>schema types that can be objects</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ComplexSchema : Schema
    {
    }

    /// <summary>a Schema that represents a Number value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class NumberSchema : PrimitiveSchema
    {
        /// <summary>precision (# of bits?) of the number</summary>
        [System.Text.Json.Serialization.JsonPropertyName("precision")]
        public string Precision { get; set; }

        /// <summary>if present, the number must be an exact multiple of this value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("multipleOf")]
        public string MultipleOf { get; set; }

        /// <summary>if present, the value must be lower than or equal to this (unless exclusiveMaximum is true)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximum")]
        public string Maximum { get; set; }

        /// <summary>if present, the value must be lower than maximum</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exclusiveMaximum")]
        public bool ExclusiveMaximum { get; set; }

        /// <summary>if present, the value must be highter than or equal to this (unless exclusiveMinimum is true)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minimum")]
        public string Minimum { get; set; }

        /// <summary>if present, the value must be higher than minimum</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exclusiveMinimum")]
        public bool ExclusiveMinimum { get; set; }
    }

    /// <summary>a Schema that represents a string value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class StringSchema : PrimitiveSchema
    {
        /// <summary>the maximum length of the string</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maxLength")]
        public string MaxLength { get; set; }

        /// <summary>the minimum length of the string</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minLength")]
        public string MinLength { get; set; }

        /// <summary>a regular expression that the string must be validated against</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pattern")]
        public string Pattern { get; set; }
    }

    /// <summary>a Schema that represents and array of values</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ArraySchema : ValueSchema
    {
        /// <summary>elementType of the array</summary>
        [System.Text.Json.Serialization.JsonPropertyName("elementType")]
        [System.ComponentModel.DataAnnotations.Required]
        public Schema ElementType { get; set; } = new Schema();

        /// <summary>maximum number of elements in the array</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maxItems")]
        public string MaxItems { get; set; }

        /// <summary>minimum number of elements in the array</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minItems")]
        public string MinItems { get; set; }

        /// <summary>if the elements in the array should be unique</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uniqueItems")]
        public bool UniqueItems { get; set; }
    }

    /// <summary>a schema that represents a set of parameters.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ParameterGroupSchema : ComplexSchema
    {
        /// <summary>the collection of properties that are in this object</summary>
        [System.Text.Json.Serialization.JsonPropertyName("parameters")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Parameter> Parameters { get; set; } = new System.Collections.ObjectModel.Collection<Parameter>();
    }

    /// <summary>a schema that represents a type with child properties.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ObjectSchema : ComplexSchema
    {
        /// <summary>the definition of the polymorphic descriminator for this type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("discriminator")]
        public Discriminator Discriminator { get; set; }

        /// <summary>the collection of properties that are in this object</summary>
        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public System.Collections.Generic.ICollection<Property> Properties { get; set; }

        /// <summary>maximum number of properties permitted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maxProperties")]
        public string MaxProperties { get; set; }

        /// <summary>minimum number of properties permitted</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minProperties")]
        public string MinProperties { get; set; }
    }

    /// <summary>an individual choice in a ChoiceSchema</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ChoiceValue
    {
        /// <summary>per-language information for this value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>the actual value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    /// <summary>a schema that represents a choice of several values (ie, an 'enum')</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ChoiceSchema : ValueSchema
    {
        /// <summary>the primitive type for the choices</summary>
        [System.Text.Json.Serialization.JsonPropertyName("choiceType")]
        [System.ComponentModel.DataAnnotations.Required]
        public StringSchema ChoiceType { get; set; } = new StringSchema();

        /// <summary>the possible choices for in the set</summary>
        [System.Text.Json.Serialization.JsonPropertyName("choices")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ChoiceValue> Choices { get; set; } = new System.Collections.ObjectModel.Collection<ChoiceValue>();
    }

    /// <summary>a schema that represents a choice of several values (ie, an 'enum')</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class SealedChoiceSchema : ValueSchema
    {
        /// <summary>the primitive type for the choices</summary>
        [System.Text.Json.Serialization.JsonPropertyName("choiceType")]
        [System.ComponentModel.DataAnnotations.Required]
        public StringSchema ChoiceType { get; set; } = new StringSchema();

        /// <summary>the possible choices for in the set</summary>
        [System.Text.Json.Serialization.JsonPropertyName("choices")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ChoiceValue> Choices { get; set; } = new System.Collections.ObjectModel.Collection<ChoiceValue>();
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class FlagValue
    {
        /// <summary>per-language information for this value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class FlagSchema : ValueSchema
    {
        /// <summary>the possible choices for in the set</summary>
        [System.Text.Json.Serialization.JsonPropertyName("choices")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FlagValue> Choices { get; set; } = new System.Collections.ObjectModel.Collection<FlagValue>();
    }

    /// <summary>a container for the actual constant value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ConstantValue
    {
        /// <summary>per-language information for this value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>the actual constant value to use</summary>
        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Value { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    /// <summary>a schema that represents a constant value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ConstantSchema : Schema
    {
        /// <summary>the schema type of the constant value (ie, StringSchema, NumberSchema, etc)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("constantSchema")]
        [System.ComponentModel.DataAnnotations.Required]
        public Schema ConstantSchema1 { get; set; } = new Schema();

        /// <summary>the actual constant value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required]
        public ConstantValue Value { get; set; } = new ConstantValue();
    }

    /// <summary>a schema that represents a boolean value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class BooleanSchema : PrimitiveSchema
    {
    }

    /// <summary>a schema that represents a ODataQuery value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ODataQuerySchema : Schema
    {
    }

    /// <summary>a schema that represents a Credential value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class CredentialSchema : PrimitiveSchema
    {
        /// <summary>the maximum length of the string</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maxLength")]
        public string MaxLength { get; set; }

        /// <summary>the minimum length of the string</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minLength")]
        public string MinLength { get; set; }

        /// <summary>a regular expression that the string must be validated against</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pattern")]
        public string Pattern { get; set; }
    }

    /// <summary>a schema that represents a Uri value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class UriSchema : PrimitiveSchema
    {
        /// <summary>the maximum length of the string</summary>
        [System.Text.Json.Serialization.JsonPropertyName("maxLength")]
        public string MaxLength { get; set; }

        /// <summary>the minimum length of the string</summary>
        [System.Text.Json.Serialization.JsonPropertyName("minLength")]
        public string MinLength { get; set; }

        /// <summary>a regular expression that the string must be validated against</summary>
        [System.Text.Json.Serialization.JsonPropertyName("pattern")]
        public string Pattern { get; set; }
    }

    /// <summary>a schema that represents a Uuid value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class UuidSchema : PrimitiveSchema
    {
    }

    /// <summary>a schema that represents a Duration value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class DurationSchema : PrimitiveSchema
    {
    }

    /// <summary>a schema that represents a DateTime value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class DateTimeSchema : PrimitiveSchema
    {
        /// <summary>date-time format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("format")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DateTimeSchemaFormat Format { get; set; }
    }

    /// <summary>a schema that represents a Date value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class DateSchema : PrimitiveSchema
    {
    }

    /// <summary>a schema that represents a Char value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class CharSchema : PrimitiveSchema
    {
    }

    /// <summary>a schema that represents a ByteArray value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ByteArraySchema : ValueSchema
    {
        /// <summary>date-time format</summary>
        [System.Text.Json.Serialization.JsonPropertyName("format")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ByteArraySchemaFormat Format { get; set; }
    }

    /// <summary>a schema that represents a UnixTime value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class UnixTimeSchema : PrimitiveSchema
    {
    }

    /// <summary>a schema that represents a key-value collection</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class DictionarySchema : ComplexSchema
    {
        /// <summary>the element type of the dictionary. (Keys are always strings)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("elementType")]
        [System.ComponentModel.DataAnnotations.Required]
        public Schema ElementType { get; set; } = new Schema();
    }

    /// <summary>an AND relationship between several schemas</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class AndSchema : ComplexSchema
    {
        /// <summary>the set of schemas that this schema is composed of.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("allOf")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ComplexSchema> AllOf { get; set; } = new System.Collections.ObjectModel.Collection<ComplexSchema>();
    }

    /// <summary>an OR relationship between several schemas</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class OrSchema : ComplexSchema
    {
        /// <summary>the set of schemas that this schema is composed of. Every schema is optional</summary>
        [System.Text.Json.Serialization.JsonPropertyName("anyOf")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ComplexSchema> AnyOf { get; set; } = new System.Collections.ObjectModel.Collection<ComplexSchema>();
    }

    /// <summary>an XOR relationship between several schemas</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class XorSchema : Schema
    {
        /// <summary>the set of schemas that this must be one and only one of.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("oneOf")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Schema> OneOf { get; set; } = new System.Collections.ObjectModel.Collection<Schema>();
    }

    /// <summary>a NOT relationship between schemas</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class NotSchema : Schema
    {
        /// <summary>the schema that this may not be.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("not")]
        [System.ComponentModel.DataAnnotations.Required]
        public Schema Not { get; set; } = new Schema();
    }

    /// <summary>the full set of schemas for a given service, categorized into convenient collections</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Schemas
    {
        /// <summary>a collection of items</summary>
        [System.Text.Json.Serialization.JsonPropertyName("arrays")]
        public System.Collections.Generic.ICollection<ArraySchema> Arrays { get; set; }

        /// <summary>an associative array (ie, dictionary, hashtable, etc)</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dictionaries")]
        public System.Collections.Generic.ICollection<DictionarySchema> Dictionaries { get; set; }

        /// <summary>a true or false value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("booleans")]
        public System.Collections.Generic.ICollection<BooleanSchema> Booleans { get; set; }

        /// <summary>a number value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("numbers")]
        public System.Collections.Generic.ICollection<NumberSchema> Numbers { get; set; }

        /// <summary>an object of some type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("objects")]
        public System.Collections.Generic.ICollection<ObjectSchema> Objects { get; set; }

        /// <summary>a string of characters</summary>
        [System.Text.Json.Serialization.JsonPropertyName("strings")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StringSchema> Strings { get; set; } = new System.Collections.ObjectModel.Collection<StringSchema>();

        /// <summary>UnixTime</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unixtimes")]
        public System.Collections.Generic.ICollection<UnixTimeSchema> Unixtimes { get; set; }

        /// <summary>ByteArray -- an array of bytes</summary>
        [System.Text.Json.Serialization.JsonPropertyName("byteArrays")]
        public System.Collections.Generic.ICollection<ByteArraySchema> ByteArrays { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("streams")]
        public System.Collections.Generic.ICollection<Schema> Streams { get; set; }

        /// <summary>a single character</summary>
        [System.Text.Json.Serialization.JsonPropertyName("chars")]
        public System.Collections.Generic.ICollection<CharSchema> Chars { get; set; }

        /// <summary>a Date</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dates")]
        public System.Collections.Generic.ICollection<DateSchema> Dates { get; set; }

        /// <summary>a DateTime</summary>
        [System.Text.Json.Serialization.JsonPropertyName("dateTimes")]
        public System.Collections.Generic.ICollection<DateTimeSchema> DateTimes { get; set; }

        /// <summary>a Duration</summary>
        [System.Text.Json.Serialization.JsonPropertyName("durations")]
        public System.Collections.Generic.ICollection<DurationSchema> Durations { get; set; }

        /// <summary>a universally unique identifier</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uuids")]
        public System.Collections.Generic.ICollection<UuidSchema> Uuids { get; set; }

        /// <summary>an URI of some kind</summary>
        [System.Text.Json.Serialization.JsonPropertyName("uris")]
        public System.Collections.Generic.ICollection<UriSchema> Uris { get; set; }

        /// <summary>a password or credential</summary>
        [System.Text.Json.Serialization.JsonPropertyName("credentials")]
        public System.Collections.Generic.ICollection<CredentialSchema> Credentials { get; set; }

        /// <summary>OData Query</summary>
        [System.Text.Json.Serialization.JsonPropertyName("odataQueries")]
        public System.Collections.Generic.ICollection<ODataQuerySchema> OdataQueries { get; set; }

        /// <summary>- this is essentially can be thought of as an 'enum'
        /// that is a choice between one of several strings</summary>
        [System.Text.Json.Serialization.JsonPropertyName("choices")]
        public System.Collections.Generic.ICollection<ChoiceSchema> Choices { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sealedChoices")]
        public System.Collections.Generic.ICollection<SealedChoiceSchema> SealedChoices { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flags")]
        public System.Collections.Generic.ICollection<FlagSchema> Flags { get; set; }

        /// <summary>a constant value</summary>
        [System.Text.Json.Serialization.JsonPropertyName("constants")]
        public System.Collections.Generic.ICollection<ConstantSchema> Constants { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ands")]
        public System.Collections.Generic.ICollection<AndSchema> Ands { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ors")]
        public System.Collections.Generic.ICollection<OrSchema> Ors { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("xors")]
        public System.Collections.Generic.ICollection<XorSchema> Xors { get; set; }

        /// <summary>it's possible that we just may make this an error
        /// in representation.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("unknowns")]
        public System.Collections.Generic.ICollection<Schema> Unknowns { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parameterGroups")]
        public System.Collections.Generic.ICollection<ParameterGroupSchema> ParameterGroups { get; set; }
    }

    /// <summary>contact information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Contact
    {
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>an URI</summary>
        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public string Url { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    /// <summary>license information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class License
    {
        /// <summary>the nameof the license</summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>an uri pointing to the full license text</summary>
        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    /// <summary>code model information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Info
    {
        /// <summary>the title of this service.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>a text description of the service</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>an uri to the terms of service specified to access the service</summary>
        [System.Text.Json.Serialization.JsonPropertyName("termsOfService")]
        public string TermsOfService { get; set; }

        /// <summary>contact information for the service</summary>
        [System.Text.Json.Serialization.JsonPropertyName("contact")]
        public Contact Contact { get; set; }

        /// <summary>license information for th service</summary>
        [System.Text.Json.Serialization.JsonPropertyName("license")]
        public License License { get; set; }

        /// <summary>External Documentation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalDocs")]
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    /// <summary>a response from a service.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Response : Metadata
    {
    }

    /// <summary>a response where the content should be treated as a stream instead of a value or object</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class StreamResponse : Response
    {
        /// <summary>indicates that this response is a stream</summary>
        [System.Text.Json.Serialization.JsonPropertyName("stream")]
        public bool Stream { get; set; }
    }

    /// <summary>a response that should be deserialized into a result of type(schema)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class SchemaResponse : Response
    {
        /// <summary>the content returned by the service for a given operaiton</summary>
        [System.Text.Json.Serialization.JsonPropertyName("schema")]
        [System.ComponentModel.DataAnnotations.Required]
        public Schema Schema { get; set; } = new Schema();
    }

    /// <summary>represents a single callable endpoint with a discrete set of inputs, and any number of output possibilities (responses or exceptions)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Operation
    {
        /// <summary>the inputs that are used to build the request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("request")]
        [System.ComponentModel.DataAnnotations.Required]
        public Request Request { get; set; } = new Request();

        /// <summary>responses that indicate a successful call</summary>
        [System.Text.Json.Serialization.JsonPropertyName("responses")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Response> Responses { get; set; } = new System.Collections.ObjectModel.Collection<Response>();

        /// <summary>responses that indicate a failed call</summary>
        [System.Text.Json.Serialization.JsonPropertyName("exceptions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Response> Exceptions { get; set; } = new System.Collections.ObjectModel.Collection<Response>();

        /// <summary>the apiVersion to use for a given profile name</summary>
        [System.Text.Json.Serialization.JsonPropertyName("profile")]
        [System.ComponentModel.DataAnnotations.Required]
        public DictionaryOfApiVersion Profile { get; set; } = new DictionaryOfApiVersion();

        [System.Text.Json.Serialization.JsonPropertyName("$key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("uid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>a short description</summary>
        [System.Text.Json.Serialization.JsonPropertyName("summary")]
        public string Summary { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("apiVersions")]
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deprecated")]
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalDocs")]
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-language information for this aspect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("protocol")]
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Request : Metadata
    {
        /// <summary>the parameter inputs to the operation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("parameters")]
        public System.Collections.Generic.ICollection<Parameter> Parameters { get; set; }
    }

    /// <summary>an operation group represents a container around set of operations</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class OperationGroup : Metadata
    {
        [System.Text.Json.Serialization.JsonPropertyName("$key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("operations")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Operation> Operations { get; set; } = new System.Collections.ObjectModel.Collection<Operation>();
    }

    /// <summary>example data [UNFINISHED]</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class Example
    {
        [System.Text.Json.Serialization.JsonPropertyName("summary")]
        public string Summary { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object Value { get; set; }

        /// <summary>an URI</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalValue")]
        public string ExternalValue { get; set; }
    }

    /// <summary>The Serialization Style used for the parameter.
    ///
    /// Describes how the parameter value will be serialized depending on the type of the parameter value.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum SerializationStyle
    {
        [System.Runtime.Serialization.EnumMember(Value = @"deepObject")]
        DeepObject = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"form")]
        Form = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"label")]
        Label = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"matrix")]
        Matrix = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"pipeDelimited")]
        PipeDelimited = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"simple")]
        Simple = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"spaceDelimited")]
        SpaceDelimited = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"xml")]
        Xml = 8,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum QueryEncodingStyle
    {
        [System.Runtime.Serialization.EnumMember(Value = @"deepObject")]
        DeepObject = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"form")]
        Form = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"pipeDelimited")]
        PipeDelimited = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"spaceDelimited")]
        SpaceDelimited = 3,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum PathEncodingStyle
    {
        [System.Runtime.Serialization.EnumMember(Value = @"label")]
        Label = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"matrix")]
        Matrix = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"simple")]
        Simple = 2,
    }

    /// <summary>standard HTTP protocol methods</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum HttpMethod
    {
        [System.Runtime.Serialization.EnumMember(Value = @"delete")]
        Delete = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"get")]
        Get = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"head")]
        Head = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"options")]
        Options = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"patch")]
        Patch = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"post")]
        Post = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"put")]
        Put = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"trace")]
        Trace = 7,
    }

    /// <summary>the location that this parameter is placed in the http request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum ParameterLocation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"body")]
        Body = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"cookie")]
        Cookie = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"header")]
        Header = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"path")]
        Path = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"query")]
        Query = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 5,
    }

    /// <summary>A catch-all for all un-handled response codes.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum Default
    {
        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum StatusCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"100")]
        _100 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"101")]
        _101 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"102")]
        _102 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"103")]
        _103 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"200")]
        _200 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"201")]
        _201 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"202")]
        _202 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"203")]
        _203 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"204")]
        _204 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"205")]
        _205 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"206")]
        _206 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"207")]
        _207 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"208")]
        _208 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"226")]
        _226 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"300")]
        _300 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"301")]
        _301 = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"302")]
        _302 = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"304")]
        _304 = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"305")]
        _305 = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"306")]
        _306 = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"307")]
        _307 = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"308")]
        _308 = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"400")]
        _400 = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"401")]
        _401 = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"402")]
        _402 = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"403")]
        _403 = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"404")]
        _404 = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"405")]
        _405 = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"406")]
        _406 = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"407")]
        _407 = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"408")]
        _408 = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"409")]
        _409 = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"410")]
        _410 = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"411")]
        _411 = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"412")]
        _412 = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"413")]
        _413 = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"414")]
        _414 = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"415")]
        _415 = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"416")]
        _416 = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"417")]
        _417 = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"418")]
        _418 = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"421")]
        _421 = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"422")]
        _422 = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"423")]
        _423 = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"424")]
        _424 = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"425")]
        _425 = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"426")]
        _426 = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"428")]
        _428 = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"429")]
        _429 = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"431")]
        _431 = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"451")]
        _451 = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"500")]
        _500 = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"501")]
        _501 = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"502")]
        _502 = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"503")]
        _503 = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"504")]
        _504 = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"505")]
        _505 = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"506")]
        _506 = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"507")]
        _507 = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"508")]
        _508 = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"510")]
        _510 = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"511")]
        _511 = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 62,
    }

    /// <summary>An object representing a Server.
    ///
    /// If the uri supports template substitution, then the variables are required.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class HttpServer
    {
        /// <summary>per-language information for this aspect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>base url for the server</summary>
        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        /// <summary>an optional collection of variables for server templating</summary>
        [System.Text.Json.Serialization.JsonPropertyName("variables")]
        public System.Collections.Generic.ICollection<ServerVariable> Variables { get; set; }
    }

    /// <summary>An object representing a Server Variable for server URL template substitution.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ServerVariable
    {
        /// <summary>per-language information for this aspect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("$key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("apiVersions")]
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deprecated")]
        public Deprecation Deprecated { get; set; }

        /// <summary>the schema type for the server variable</summary>
        [System.Text.Json.Serialization.JsonPropertyName("schema")]
        [System.ComponentModel.DataAnnotations.Required]
        public ValueSchema Schema { get; set; } = new ValueSchema();

        /// <summary>The default value to use for substitution, which SHALL be sent if an alternate value is not supplied.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("default")]
        public string Default { get; set; }

        /// <summary>if the value is marked 'required'.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("required")]
        public bool Required { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum Scheme
    {
        [System.Runtime.Serialization.EnumMember(Value = @"bearer")]
        Bearer = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum SecurityType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiKey")]
        ApiKey = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"http")]
        Http = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"oauth2")]
        Oauth2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"openIdConnect")]
        OpenIdConnect = 3,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class AuthorizationCodeOAuthFlow
    {
        /// <summary>an URI</summary>
        [System.Text.Json.Serialization.JsonPropertyName("authorizationUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AuthorizationUrl { get; set; }

        /// <summary>an URI</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tokenUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenUrl { get; set; }

        /// <summary>an URI</summary>
        [System.Text.Json.Serialization.JsonPropertyName("refreshUrl")]
        public string RefreshUrl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        [System.ComponentModel.DataAnnotations.Required]
        public DictionaryOfString Scopes { get; set; } = new DictionaryOfString();

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class BearerHTTPSecurityScheme
    {
        [System.Text.Json.Serialization.JsonPropertyName("scheme")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BearerHTTPSecuritySchemeScheme Scheme { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bearerFormat")]
        public string BearerFormat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BearerHTTPSecuritySchemeType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ClientCredentialsFlow
    {
        /// <summary>an URI</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tokenUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenUrl { get; set; }

        /// <summary>an URI</summary>
        [System.Text.Json.Serialization.JsonPropertyName("refreshUrl")]
        public string RefreshUrl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        [System.ComponentModel.DataAnnotations.Required]
        public DictionaryOfString Scopes { get; set; } = new DictionaryOfString();

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ImplicitOAuthFlow
    {
        /// <summary>an URI</summary>
        [System.Text.Json.Serialization.JsonPropertyName("authorizationUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AuthorizationUrl { get; set; }

        /// <summary>an URI</summary>
        [System.Text.Json.Serialization.JsonPropertyName("refreshUrl")]
        public string RefreshUrl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        [System.ComponentModel.DataAnnotations.Required]
        public DictionaryOfString Scopes { get; set; } = new DictionaryOfString();

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class NonBearerHTTPSecurityScheme
    {
        [System.Text.Json.Serialization.JsonPropertyName("scheme")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Scheme { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NonBearerHTTPSecuritySchemeType Type { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class OAuth2SecurityScheme
    {
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OAuth2SecuritySchemeType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flows")]
        [System.ComponentModel.DataAnnotations.Required]
        public OAuthFlows Flows { get; set; } = new OAuthFlows();

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class OAuthFlows
    {
        [System.Text.Json.Serialization.JsonPropertyName("implicit")]
        public ImplicitOAuthFlow Implicit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public PasswordOAuthFlow Password { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientCredentials")]
        public ClientCredentialsFlow ClientCredentials { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("authorizationCode")]
        public AuthorizationCodeOAuthFlow AuthorizationCode { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class HTTPSecurityScheme
    {
        private System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement> _additionalProperties = new System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement>();

        [System.Text.Json.Serialization.JsonExtensionDataAttribute]
        public System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class SecurityScheme
    {
        private System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement> _additionalProperties = new System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement>();

        [System.Text.Json.Serialization.JsonExtensionDataAttribute]
        public System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class APIKeySecurityScheme
    {
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public APIKeySecuritySchemeType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("in")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ParameterLocation In { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class OpenIdConnectSecurityScheme
    {
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OpenIdConnectSecuritySchemeType Type { get; set; }

        /// <summary>an URI</summary>
        [System.Text.Json.Serialization.JsonPropertyName("openIdConnectUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OpenIdConnectUrl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class PasswordOAuthFlow
    {
        /// <summary>an URI</summary>
        [System.Text.Json.Serialization.JsonPropertyName("tokenUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenUrl { get; set; }

        /// <summary>an URI</summary>
        [System.Text.Json.Serialization.JsonPropertyName("refreshUrl")]
        public string RefreshUrl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        [System.ComponentModel.DataAnnotations.Required]
        public DictionaryOfString Scopes { get; set; } = new DictionaryOfString();

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    /// <summary>common ways of serializing simple parameters</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class SecurityRequirement
    {
    }

    /// <summary>extended metadata for HTTP operation parameters</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class HttpParameter : Protocol
    {
        /// <summary>the location that this parameter is placed in the http request</summary>
        [System.Text.Json.Serialization.JsonPropertyName("in")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ParameterLocation In { get; set; }

        /// <summary>the Serialization Style used for the parameter.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("style")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SerializationStyle Style { get; set; }

        /// <summary>when set, this indicates that the content of the parameter should not be subject to URI encoding rules.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("skipUriEncoding")]
        public bool SkipUriEncoding { get; set; }
    }

    /// <summary>HTTP operation protocol data</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class HttpRequest : Protocol
    {
        /// <summary>A relative path to an individual endpoint.
        ///
        /// The field name MUST begin with a slash.
        /// The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL.
        /// Path templating is allowed.
        ///
        /// When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("path")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; }

        /// <summary>the HTTP Method used to process this operation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("method")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HttpMethod Method { get; set; }

        /// <summary>each method must have one or more servers that it is connected to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("servers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HttpServer> Servers { get; set; } = new System.Collections.ObjectModel.Collection<HttpServer>();
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class HttpWithBodyRequest : HttpRequest
    {
        /// <summary>must set a media type for the body</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mediaType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MediaType { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class HttpStreamRequest : HttpWithBodyRequest
    {
        [System.Text.Json.Serialization.JsonPropertyName("stream")]
        public bool Stream { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class HttpMultiPartRequest : HttpWithBodyRequest
    {
        /// <summary>indicates that the HTTP Request should be a multipart request
        ///
        /// ie, that it has multiple requests in a single request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("multipart")]
        public bool Multipart { get; set; }

        /// <summary>the multiple request parts that make up this request ?? is this right?</summary>
        [System.Text.Json.Serialization.JsonPropertyName("parts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Request> Parts { get; set; } = new System.Collections.ObjectModel.Collection<Request>();
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class HttpMultipartRequest
    {
        /// <summary>indicates that the HTTP Request should be a multipart request
        ///
        /// ie, that it has multiple requests in a single request.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("multipart")]
        public bool Multipart { get; set; } = true;

        /// <summary>the multiple request parts that make up this request ?? is this right?</summary>
        [System.Text.Json.Serialization.JsonPropertyName("parts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> Parts { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        /// <summary>must set a media type for the body</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mediaType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MediaType { get; set; }

        /// <summary>A relative path to an individual endpoint.
        ///
        /// The field name MUST begin with a slash.
        /// The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL.
        /// Path templating is allowed.
        ///
        /// When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("path")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; }

        /// <summary>the HTTP Method used to process this operation</summary>
        [System.Text.Json.Serialization.JsonPropertyName("method")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HttpMethod Method { get; set; }

        /// <summary>each method must have one or more servers that it is connected to.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("servers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HttpServer> Servers { get; set; } = new System.Collections.ObjectModel.Collection<HttpServer>();
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class HttpResponse : Protocol
    {
        /// <summary>the possible HTTP status codes that this response MUST match one of.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("statusCodes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StatusCodes> StatusCodes { get; set; } = new System.Collections.ObjectModel.Collection<StatusCodes>();

        /// <summary>the possible media types that this response MUST match one of</summary>
        [System.Text.Json.Serialization.JsonPropertyName("mediaTypes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MediaTypes { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>content returned by the service in the HTTP headers</summary>
        [System.Text.Json.Serialization.JsonPropertyName("headers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Schema> Headers { get; set; } = new System.Collections.ObjectModel.Collection<Schema>();
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class HttpStreamResponse : HttpResponse
    {
        /// <summary>stream responses</summary>
        [System.Text.Json.Serialization.JsonPropertyName("stream")]
        public bool Stream { get; set; }
    }

    /// <summary>code model metadata for HTTP protocol</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class HttpModel : Protocol
    {
        /// <summary>a collection of server definitions for the service</summary>
        [System.Text.Json.Serialization.JsonPropertyName("servers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HttpServer> Servers { get; set; } = new System.Collections.ObjectModel.Collection<HttpServer>();

        /// <summary>a collection of security requirements for the service</summary>
        [System.Text.Json.Serialization.JsonPropertyName("security")]
        public System.Collections.Generic.ICollection<SecurityRequirement> Security { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class DictionaryOfAny : System.Collections.Generic.Dictionary<string, System.Text.Json.JsonElement>
    {
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class DictionaryOfString : System.Collections.Generic.Dictionary<string, string>
    {
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ChoiceType
    {
        /// <summary>per-language information for Schema</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>the schema type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AllSchemaTypes Type { get; set; }

        /// <summary>a short description</summary>
        [System.Text.Json.Serialization.JsonPropertyName("summary")]
        public string Summary { get; set; }

        /// <summary>example information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("example")]
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultValue")]
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serialization")]
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.Text.Json.Serialization.JsonPropertyName("uid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("$key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("apiVersions")]
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deprecated")]
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalDocs")]
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("protocol")]
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class ConstantType
    {
        /// <summary>per-language information for Schema</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>the schema type</summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AllSchemaTypes Type { get; set; }

        /// <summary>a short description</summary>
        [System.Text.Json.Serialization.JsonPropertyName("summary")]
        public string Summary { get; set; }

        /// <summary>example information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("example")]
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaultValue")]
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.Text.Json.Serialization.JsonPropertyName("serialization")]
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.Text.Json.Serialization.JsonPropertyName("uid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("$key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        [System.Text.Json.Serialization.JsonPropertyName("apiVersions")]
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        [System.Text.Json.Serialization.JsonPropertyName("deprecated")]
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        [System.Text.Json.Serialization.JsonPropertyName("externalDocs")]
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("protocol")]
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class DictionaryOfApiVersion : System.Collections.Generic.Dictionary<string, ApiVersion>
    {
    }

    /// <summary>the model that contains all the information required to generate a service api</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal partial class CodeModel
    {
        /// <summary>Code model information</summary>
        [System.Text.Json.Serialization.JsonPropertyName("info")]
        [System.ComponentModel.DataAnnotations.Required]
        public Info Info { get; set; } = new Info();

        /// <summary>All schemas for the model</summary>
        [System.Text.Json.Serialization.JsonPropertyName("schemas")]
        [System.ComponentModel.DataAnnotations.Required]
        public Schemas Schemas { get; set; } = new Schemas();

        /// <summary>All operations</summary>
        [System.Text.Json.Serialization.JsonPropertyName("operationGroups")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OperationGroup> OperationGroups { get; set; } = new System.Collections.ObjectModel.Collection<OperationGroup>();

        /// <summary>all global parameters (ie, ImplementationLocation = client )</summary>
        [System.Text.Json.Serialization.JsonPropertyName("globalParameters")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Parameter> GlobalParameters { get; set; } = new System.Collections.ObjectModel.Collection<Parameter>();

        /// <summary>per-language information for this aspect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.Text.Json.Serialization.JsonPropertyName("protocol")]
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        [System.Text.Json.Serialization.JsonPropertyName("extensions")]
        public DictionaryOfAny Extensions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum ApiVersionRange
    {
        [System.Runtime.Serialization.EnumMember(Value = @"+")]
        Plus = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-")]
        Minus = 1,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum DateTimeSchemaFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = @"date-time")]
        DateTime = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"date-time-rfc1123")]
        DateTimeRfc1123 = 1,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum ByteArraySchemaFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = @"base64url")]
        Base64url = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"byte")]
        Byte = 1,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum BearerHTTPSecuritySchemeScheme
    {
        [System.Runtime.Serialization.EnumMember(Value = @"bearer")]
        Bearer = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum BearerHTTPSecuritySchemeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"http")]
        Http = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum NonBearerHTTPSecuritySchemeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"http")]
        Http = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum OAuth2SecuritySchemeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"oauth2")]
        Oauth2 = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum APIKeySecuritySchemeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiKey")]
        ApiKey = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum OpenIdConnectSecuritySchemeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"openIdConnect")]
        OpenIdConnect = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    internal enum StatusCodes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"100")]
        _100 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"101")]
        _101 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"102")]
        _102 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"103")]
        _103 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"200")]
        _200 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"201")]
        _201 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"202")]
        _202 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"203")]
        _203 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"204")]
        _204 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"205")]
        _205 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"206")]
        _206 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"207")]
        _207 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"208")]
        _208 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"226")]
        _226 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"300")]
        _300 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"301")]
        _301 = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"302")]
        _302 = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"304")]
        _304 = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"305")]
        _305 = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"306")]
        _306 = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"307")]
        _307 = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"308")]
        _308 = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"400")]
        _400 = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"401")]
        _401 = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"402")]
        _402 = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"403")]
        _403 = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"404")]
        _404 = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"405")]
        _405 = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"406")]
        _406 = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"407")]
        _407 = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"408")]
        _408 = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"409")]
        _409 = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"410")]
        _410 = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"411")]
        _411 = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"412")]
        _412 = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"413")]
        _413 = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"414")]
        _414 = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"415")]
        _415 = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"416")]
        _416 = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"417")]
        _417 = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"418")]
        _418 = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"421")]
        _421 = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"422")]
        _422 = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"423")]
        _423 = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"424")]
        _424 = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"425")]
        _425 = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"426")]
        _426 = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"428")]
        _428 = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"429")]
        _429 = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"431")]
        _431 = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"451")]
        _451 = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"500")]
        _500 = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"501")]
        _501 = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"502")]
        _502 = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"503")]
        _503 = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"504")]
        _504 = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"505")]
        _505 = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"506")]
        _506 = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"507")]
        _507 = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"508")]
        _508 = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"510")]
        _510 = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"511")]
        _511 = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 62,
    }
}